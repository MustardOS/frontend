#pragma once

#include "options.h"

extern struct mux_lang lang;

struct mux_lang {
    struct {
        char NO_JOY[MAX_BUFFER_SIZE];
        char NO_JOY_ALT[MAX_BUFFER_SIZE];
        char FAIL_ALLOCATE_MEM[MAX_BUFFER_SIZE];
        char FAIL_DUP_STRING[MAX_BUFFER_SIZE];
        char FAIL_DIR_OPEN[MAX_BUFFER_SIZE];
        char FAIL_FILE_OPEN[MAX_BUFFER_SIZE];
        char FAIL_FILE_WRITE[MAX_BUFFER_SIZE];
        char FAIL_FILE_READ[MAX_BUFFER_SIZE];
        char FAIL_FORK[MAX_BUFFER_SIZE];
        char FAIL_RUN_COMMAND[MAX_BUFFER_SIZE];
        char FAIL_READ_COMMAND[MAX_BUFFER_SIZE];
        char FAIL_CLOSE_COMMAND[MAX_BUFFER_SIZE];
        char FAIL_DELETE_FILE[MAX_BUFFER_SIZE];
        char FAIL_CREATE_FILE[MAX_BUFFER_SIZE];
        char FAIL_STAT[MAX_BUFFER_SIZE];
        char FAIL_PROC_PART[MAX_BUFFER_SIZE];
        char FAIL_INT16_LENGTH[MAX_BUFFER_SIZE];
    } SYSTEM;

    struct {
        char BACK[MAX_BUFFER_SIZE];
        char CLEAR[MAX_BUFFER_SIZE];
        char COLLECT[MAX_BUFFER_SIZE];
        char DIRECTORY[MAX_BUFFER_SIZE];
        char DISABLED[MAX_BUFFER_SIZE];
        char ENABLED[MAX_BUFFER_SIZE];
        char EXTRACT[MAX_BUFFER_SIZE];
        char INDIVIDUAL[MAX_BUFFER_SIZE];
        char INFO[MAX_BUFFER_SIZE];
        char KIOSK_DISABLE[MAX_BUFFER_SIZE];
        char LAUNCH[MAX_BUFFER_SIZE];
        char LOAD[MAX_BUFFER_SIZE];
        char LOADING[MAX_BUFFER_SIZE];
        char MIGRATE[MAX_BUFFER_SIZE];
        char NEW[MAX_BUFFER_SIZE];
        char NO_HELP[MAX_BUFFER_SIZE];
        char NO_INFO[MAX_BUFFER_SIZE];
        char ADD[MAX_BUFFER_SIZE];
        char ADD_COLLECT[MAX_BUFFER_SIZE];
        char OPEN[MAX_BUFFER_SIZE];
        char PREVIOUS[MAX_BUFFER_SIZE];
        char RECURSIVE[MAX_BUFFER_SIZE];
        char REMOVE[MAX_BUFFER_SIZE];
        char RESCAN[MAX_BUFFER_SIZE];
        char RESTORE[MAX_BUFFER_SIZE];
        char SAVE[MAX_BUFFER_SIZE];
        char SELECT[MAX_BUFFER_SIZE];
        char SWITCH_IMAGE[MAX_BUFFER_SIZE];
        char SWITCH_INFO[MAX_BUFFER_SIZE];
        char SYNC[MAX_BUFFER_SIZE];
        char UNKNOWN[MAX_BUFFER_SIZE];
        char USE[MAX_BUFFER_SIZE];
        char REBOOTING[MAX_BUFFER_SIZE];
        char SHUTTING_DOWN[MAX_BUFFER_SIZE];
    } GENERIC;

    struct {
        char LOAD_APP[MAX_BUFFER_SIZE];
        char NO_APP[MAX_BUFFER_SIZE];
        char TITLE[MAX_BUFFER_SIZE];
        char ARCHIVE[MAX_BUFFER_SIZE];
        char TASK[MAX_BUFFER_SIZE];
    } MUXAPP;

    struct {
        char HELP[MAX_BUFFER_SIZE];
        char INSTALLED[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char TITLE[MAX_BUFFER_SIZE];
    } MUXARCHIVE;

    struct {
        char DIR[MAX_BUFFER_SIZE];
        char FILE[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char TITLE[MAX_BUFFER_SIZE];
    } MUXASSIGN;

    struct {
        char BOOT[MAX_BUFFER_SIZE];
        char CAPACITY[MAX_BUFFER_SIZE];
        char POWER[MAX_BUFFER_SIZE];
        char VOLTAGE[MAX_BUFFER_SIZE];
    } MUXCHARGE;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        struct {
            char REMOVE_FILE[MAX_BUFFER_SIZE];
            char REMOVE_DIR[MAX_BUFFER_SIZE];
            char LOAD[MAX_BUFFER_SIZE];
        } ERROR;
    } MUXCOLLECT;

    struct {
        char CUSTOM[MAX_BUFFER_SIZE];
        char DATETIME[MAX_BUFFER_SIZE];
        char GENERAL[MAX_BUFFER_SIZE];
        char LANGUAGE[MAX_BUFFER_SIZE];
        char STORAGE[MAX_BUFFER_SIZE];
        char TITLE[MAX_BUFFER_SIZE];
        char WEB[MAX_BUFFER_SIZE];
        char WIFI[MAX_BUFFER_SIZE];
        struct {
            char CUSTOM[MAX_BUFFER_SIZE];
            char DATETIME[MAX_BUFFER_SIZE];
            char GENERAL[MAX_BUFFER_SIZE];
            char LANGUAGE[MAX_BUFFER_SIZE];
            char STORAGE[MAX_BUFFER_SIZE];
            char WEB[MAX_BUFFER_SIZE];
            char WIFI[MAX_BUFFER_SIZE];
        } HELP;
    } MUXCONFIG;

    struct {
        char CATALOGUE[MAX_BUFFER_SIZE];
        char CONFIG[MAX_BUFFER_SIZE];
        char THEME[MAX_BUFFER_SIZE];
        char TITLE[MAX_BUFFER_SIZE];
        struct {
            char CATALOGUE[MAX_BUFFER_SIZE];
            char CONFIG[MAX_BUFFER_SIZE];
            char THEME[MAX_BUFFER_SIZE];
        } HELP;
    } MUXCUSTOM;

    struct {
        char HELP[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char TITLE[MAX_BUFFER_SIZE];
    } MUXGOV;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char REMOVE[MAX_BUFFER_SIZE];
        struct {
            char REMOVE[MAX_BUFFER_SIZE];
            char LOAD[MAX_BUFFER_SIZE];
        } ERROR;
    } MUXHISTORY;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NO_CABLE[MAX_BUFFER_SIZE];
        char DENY_MODIFY[MAX_BUFFER_SIZE];
        char ACTIVE[MAX_BUFFER_SIZE];
        char RESOLUTION[MAX_BUFFER_SIZE];
        char THEME_RESOLUTION[MAX_BUFFER_SIZE];
        char SCREEN[MAX_BUFFER_SIZE];
        struct {
            char DEPTH[MAX_BUFFER_SIZE];
            char SPACE[MAX_BUFFER_SIZE];
            struct {
                char TITLE[MAX_BUFFER_SIZE];
                char FULL[MAX_BUFFER_SIZE];
                char LIMITED[MAX_BUFFER_SIZE];
            } RANGE;
        } COLOUR;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char EXTERNAL[MAX_BUFFER_SIZE];
            char INTERNAL[MAX_BUFFER_SIZE];
        } AUDIO_OUTPUT;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char OVER[MAX_BUFFER_SIZE];
            char UNDER[MAX_BUFFER_SIZE];
        } SCAN_SCALE;
        struct {
            char ACTIVE[MAX_BUFFER_SIZE];
            char AUDIO_OUTPUT[MAX_BUFFER_SIZE];
            char RESOLUTION[MAX_BUFFER_SIZE];
            char THEME_RESOLUTION[MAX_BUFFER_SIZE];
            char SCAN_SCALE[MAX_BUFFER_SIZE];
            struct {
                char DEPTH[MAX_BUFFER_SIZE];
                char RANGE[MAX_BUFFER_SIZE];
                char SPACE[MAX_BUFFER_SIZE];
            } COLOUR;
        } HELP;
    } MUXHDMI;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char SYSTEM[MAX_BUFFER_SIZE];
        char ACTIVITY[MAX_BUFFER_SIZE];
        char INPUT[MAX_BUFFER_SIZE];
        char CREDIT[MAX_BUFFER_SIZE];
        struct {
            char SYSTEM[MAX_BUFFER_SIZE];
            char ACTIVITY[MAX_BUFFER_SIZE];
            char INPUT[MAX_BUFFER_SIZE];
            char CREDIT[MAX_BUFFER_SIZE];
        } HELP;
    } MUXINFO;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char SAVE[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
    } MUXLANGUAGE;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char APP[MAX_BUFFER_SIZE];
        char CONFIG[MAX_BUFFER_SIZE];
        char INFO[MAX_BUFFER_SIZE];
        char COLLECTION[MAX_BUFFER_SIZE];
        char HISTORY[MAX_BUFFER_SIZE];
        char EXPLORE[MAX_BUFFER_SIZE];
        char SHUTDOWN[MAX_BUFFER_SIZE];
        char REBOOT[MAX_BUFFER_SIZE];
        struct {
            char ERROR[MAX_BUFFER_SIZE];
            char PROCESS[MAX_BUFFER_SIZE];
        } KIOSK;
        struct {
            char APP[MAX_BUFFER_SIZE];
            char CONFIG[MAX_BUFFER_SIZE];
            char INFO[MAX_BUFFER_SIZE];
            char COLLECTION[MAX_BUFFER_SIZE];
            char HISTORY[MAX_BUFFER_SIZE];
            char EXPLORE[MAX_BUFFER_SIZE];
            char SHUTDOWN[MAX_BUFFER_SIZE];
            char REBOOT[MAX_BUFFER_SIZE];
        } HELP;
    } MUXLAUNCH;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char LOAD[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
        char INVALID_SSID[MAX_BUFFER_SIZE];
        char INVALID_NETWORK[MAX_BUFFER_SIZE];
    } MUXNETPROFILE;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char SCAN[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
    } MUXNETSCAN;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char CONNECT[MAX_BUFFER_SIZE];
        char DISCONNECT[MAX_BUFFER_SIZE];
        char CONNECTED[MAX_BUFFER_SIZE];
        char NOT_CONNECTED[MAX_BUFFER_SIZE];
        char DENY_MODIFY[MAX_BUFFER_SIZE];
        char SAVE[MAX_BUFFER_SIZE];
        char DHCP[MAX_BUFFER_SIZE];
        char STATIC[MAX_BUFFER_SIZE];
        char SCAN[MAX_BUFFER_SIZE];
        char CIDR[MAX_BUFFER_SIZE];
        char PROFILES[MAX_BUFFER_SIZE];
        char CONNECT_TRY[MAX_BUFFER_SIZE];
        char PASSWORD[MAX_BUFFER_SIZE];
        char NO_PASSWORD[MAX_BUFFER_SIZE];
        char DNS[MAX_BUFFER_SIZE];
        char IP[MAX_BUFFER_SIZE];
        char ENCRYPT_PASSWORD[MAX_BUFFER_SIZE];
        char GATEWAY[MAX_BUFFER_SIZE];
        char HIDDEN[MAX_BUFFER_SIZE];
        char SSID[MAX_BUFFER_SIZE];
        char ACTIVE[MAX_BUFFER_SIZE];
        char DISABLED[MAX_BUFFER_SIZE];
        char TYPE[MAX_BUFFER_SIZE];
        char CHECK[MAX_BUFFER_SIZE];
        struct {
            char TYPE[MAX_BUFFER_SIZE];
            char ACTIVE[MAX_BUFFER_SIZE];
            char HIDDEN[MAX_BUFFER_SIZE];
            char PASSWORD[MAX_BUFFER_SIZE];
            char SSID[MAX_BUFFER_SIZE];
            char GATEWAY[MAX_BUFFER_SIZE];
            char CIDR[MAX_BUFFER_SIZE];
            char IP[MAX_BUFFER_SIZE];
            char CONNECT[MAX_BUFFER_SIZE];
        } HELP;
    } MUXNETWORK;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char ASSIGN_CORE[MAX_BUFFER_SIZE];
        char ASSIGN_GOV[MAX_BUFFER_SIZE];
        char SEARCH[MAX_BUFFER_SIZE];
        char NAME[MAX_BUFFER_SIZE];
        char CURRENT[MAX_BUFFER_SIZE];
        char DIRECTORY[MAX_BUFFER_SIZE];
        char INDIVIDUAL[MAX_BUFFER_SIZE];
        struct {
            char ASSIGN_CORE[MAX_BUFFER_SIZE];
            char ASSIGN_GOV[MAX_BUFFER_SIZE];
            char SEARCH[MAX_BUFFER_SIZE];
        } HELP;
    } MUXOPTION;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
    } MUXPASS;

    struct {
        char CUSTOM[MAX_BUFFER_SIZE];
        char CATALOGUE[MAX_BUFFER_SIZE];
        char CONFIG[MAX_BUFFER_SIZE];
        char THEME[MAX_BUFFER_SIZE];
        char INVALID[MAX_BUFFER_SIZE];
        struct {
            char CREDIT[MAX_BUFFER_SIZE];
            char CUSTOM[MAX_BUFFER_SIZE];
            char CATALOGUE[MAX_BUFFER_SIZE];
            char CONFIG[MAX_BUFFER_SIZE];
            char THEME[MAX_BUFFER_SIZE];
        } NONE;
    } MUXPICKER;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char REFRESH[MAX_BUFFER_SIZE];
        char REFRESH_RUN[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        struct {
            char NO_FOLDER[MAX_BUFFER_SIZE];
            char NO_CORE[MAX_BUFFER_SIZE];
            char GENERAL[MAX_BUFFER_SIZE];
        } ERROR;
    } MUXPLORE;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char LOW_BATTERY[MAX_BUFFER_SIZE];
        struct {
            char DISPLAY[MAX_BUFFER_SIZE];
            char SLEEP[MAX_BUFFER_SIZE];
            char t10s[MAX_BUFFER_SIZE];
            char t30s[MAX_BUFFER_SIZE];
            char t60s[MAX_BUFFER_SIZE];
            char t2m[MAX_BUFFER_SIZE];
            char t5m[MAX_BUFFER_SIZE];
            char t10m[MAX_BUFFER_SIZE];
            char t15m[MAX_BUFFER_SIZE];
            char t30m[MAX_BUFFER_SIZE];
        } IDLE;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char INSTANT[MAX_BUFFER_SIZE];
            char SUSPEND[MAX_BUFFER_SIZE];
            char t10s[MAX_BUFFER_SIZE];
            char t30s[MAX_BUFFER_SIZE];
            char t60s[MAX_BUFFER_SIZE];
            char t2m[MAX_BUFFER_SIZE];
            char t5m[MAX_BUFFER_SIZE];
            char t10m[MAX_BUFFER_SIZE];
            char t15m[MAX_BUFFER_SIZE];
            char t30m[MAX_BUFFER_SIZE];
            char t60m[MAX_BUFFER_SIZE];
        } SLEEP;
        struct {
            char IDLE_DISPLAY[MAX_BUFFER_SIZE];
            char IDLE_SLEEP[MAX_BUFFER_SIZE];
            char LOW_BATTERY[MAX_BUFFER_SIZE];
            char SLEEP_FUNCTION[MAX_BUFFER_SIZE];
        } HELP;
    } MUXPOWER;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char DAY[MAX_BUFFER_SIZE];
        char MONTH[MAX_BUFFER_SIZE];
        char YEAR[MAX_BUFFER_SIZE];
        char HOUR[MAX_BUFFER_SIZE];
        char MINUTE[MAX_BUFFER_SIZE];
        char TIMEZONE[MAX_BUFFER_SIZE];
        char NOTATION[MAX_BUFFER_SIZE];
        char F_12HR[MAX_BUFFER_SIZE];
        char F_24HR[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
    } MUXRTC;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char GLOBAL[MAX_BUFFER_SIZE];
        char LOCAL[MAX_BUFFER_SIZE];
        char LOOKUP[MAX_BUFFER_SIZE];
        char SEARCH[MAX_BUFFER_SIZE];
        char ERROR[MAX_BUFFER_SIZE];
        struct {
            char GLOBAL[MAX_BUFFER_SIZE];
            char LOCAL[MAX_BUFFER_SIZE];
            char LOOKUP[MAX_BUFFER_SIZE];
        } HELP;
    } MUXSEARCH;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
    } MUXSNAPSHOT;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char BIOS[MAX_BUFFER_SIZE];
        char CATALOGUE[MAX_BUFFER_SIZE];
        char FRIENDLY[MAX_BUFFER_SIZE];
        char RA_SYSTEM[MAX_BUFFER_SIZE];
        char RA_CONFIG[MAX_BUFFER_SIZE];
        char ASSIGNED[MAX_BUFFER_SIZE];
        char COLLECTION[MAX_BUFFER_SIZE];
        char HISTORY[MAX_BUFFER_SIZE];
        char MUSIC[MAX_BUFFER_SIZE];
        char SAVE[MAX_BUFFER_SIZE];
        char SCREENSHOT[MAX_BUFFER_SIZE];
        char LANGUAGE[MAX_BUFFER_SIZE];
        char NET_PROFILE[MAX_BUFFER_SIZE];
        char SYNCTHING[MAX_BUFFER_SIZE];
        char USER_INIT[MAX_BUFFER_SIZE];
        struct {
            char THEME[MAX_BUFFER_SIZE];
            char CATALOGUE[MAX_BUFFER_SIZE];
            char RA_CONFIG[MAX_BUFFER_SIZE];
        } PACKAGE;
        struct {
            char BIOS[MAX_BUFFER_SIZE];
            char CATALOGUE[MAX_BUFFER_SIZE];
            char FRIENDLY[MAX_BUFFER_SIZE];
            char RA_SYSTEM[MAX_BUFFER_SIZE];
            char RA_CONFIG[MAX_BUFFER_SIZE];
            char ASSIGNED[MAX_BUFFER_SIZE];
            char COLLECTION[MAX_BUFFER_SIZE];
            char HISTORY[MAX_BUFFER_SIZE];
            char MUSIC[MAX_BUFFER_SIZE];
            char SAVE[MAX_BUFFER_SIZE];
            char SCREENSHOT[MAX_BUFFER_SIZE];
            char LANGUAGE[MAX_BUFFER_SIZE];
            char NET_PROFILE[MAX_BUFFER_SIZE];
            char SYNCTHING[MAX_BUFFER_SIZE];
            char USER_INIT[MAX_BUFFER_SIZE];
            struct {
                char THEME[MAX_BUFFER_SIZE];
                char CATALOGUE[MAX_BUFFER_SIZE];
                char RA_CONFIG[MAX_BUFFER_SIZE];
            } PACKAGE;
        } HELP;
    } MUXSTORAGE;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char VERSION[MAX_BUFFER_SIZE];
        char DEVICE[MAX_BUFFER_SIZE];
        char KERNEL[MAX_BUFFER_SIZE];
        char UPTIME[MAX_BUFFER_SIZE];
        struct {
            char INFO[MAX_BUFFER_SIZE];
            char DROP[MAX_BUFFER_SIZE];
        } MEMORY;
        char TEMP[MAX_BUFFER_SIZE];
        char CAPACITY[MAX_BUFFER_SIZE];
        char VOLTAGE[MAX_BUFFER_SIZE];
        struct {
            char INFO[MAX_BUFFER_SIZE];
            char SPEED[MAX_BUFFER_SIZE];
            char GOV[MAX_BUFFER_SIZE];
        } CPU;
        struct {
            char VERSION[MAX_BUFFER_SIZE];
            char DEVICE[MAX_BUFFER_SIZE];
            char KERNEL[MAX_BUFFER_SIZE];
            char UPTIME[MAX_BUFFER_SIZE];
            char MEMORY[MAX_BUFFER_SIZE];
            char TEMP[MAX_BUFFER_SIZE];
            char SERVICE[MAX_BUFFER_SIZE];
            char CAPACITY[MAX_BUFFER_SIZE];
            char VOLTAGE[MAX_BUFFER_SIZE];
            struct {
                char INFO[MAX_BUFFER_SIZE];
                char SPEED[MAX_BUFFER_SIZE];
                char GOV[MAX_BUFFER_SIZE];
            } CPU;
        } HELP;
    } MUXSYSINFO;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
    } MUXTASK;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char ANY[MAX_BUFFER_SIZE];
        char POWER[MAX_BUFFER_SIZE];
    } MUXTESTER;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NONE[MAX_BUFFER_SIZE];
        char SAVE[MAX_BUFFER_SIZE];
        char HELP[MAX_BUFFER_SIZE];
    } MUXTIMEZONE;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char SPEED[MAX_BUFFER_SIZE];
        char THERMAL[MAX_BUFFER_SIZE];
        char OFFSET[MAX_BUFFER_SIZE];
        char LOCK[MAX_BUFFER_SIZE];
        char LED[MAX_BUFFER_SIZE];
        char RANDOM[MAX_BUFFER_SIZE];
        char NET_WAIT[MAX_BUFFER_SIZE];
        char VERBOSE[MAX_BUFFER_SIZE];
        char USER_INIT[MAX_BUFFER_SIZE];
        char DPAD[MAX_BUFFER_SIZE];
        char OVERDRIVE[MAX_BUFFER_SIZE];
        char SWAPFILE[MAX_BUFFER_SIZE];
        char STATE[MAX_BUFFER_SIZE];
        char TUNING[MAX_BUFFER_SIZE];
        char USB[MAX_BUFFER_SIZE];
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char RETRO[MAX_BUFFER_SIZE];
            char MODERN[MAX_BUFFER_SIZE];
        } SWAP;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char LANG[MAX_BUFFER_SIZE];
            char THEME[MAX_BUFFER_SIZE];
        } FONT;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char QUIET[MAX_BUFFER_SIZE];
            char LOUD[MAX_BUFFER_SIZE];
        } VOLUME;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char LOW[MAX_BUFFER_SIZE];
            char HIGH[MAX_BUFFER_SIZE];
        } BRIGHT;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char ST[MAX_BUFFER_SIZE];
            char SH[MAX_BUFFER_SIZE];
            char SL[MAX_BUFFER_SIZE];
            char STSH[MAX_BUFFER_SIZE];
            char STSL[MAX_BUFFER_SIZE];
            char SHSL[MAX_BUFFER_SIZE];
        } RUMBLE;
        struct {
            char SPEED[MAX_BUFFER_SIZE];
            char THERMAL[MAX_BUFFER_SIZE];
            char OFFSET[MAX_BUFFER_SIZE];
            char LOCK[MAX_BUFFER_SIZE];
            char LED[MAX_BUFFER_SIZE];
            char RANDOM[MAX_BUFFER_SIZE];
            char NET_WAIT[MAX_BUFFER_SIZE];
            char VERBOSE[MAX_BUFFER_SIZE];
            char USER_INIT[MAX_BUFFER_SIZE];
            char DPAD[MAX_BUFFER_SIZE];
            char OVERDRIVE[MAX_BUFFER_SIZE];
            char SWAPFILE[MAX_BUFFER_SIZE];
            char TUNING[MAX_BUFFER_SIZE];
            char RUMBLE[MAX_BUFFER_SIZE];
            char STATE[MAX_BUFFER_SIZE];
            char USB[MAX_BUFFER_SIZE];
            char BRIGHT[MAX_BUFFER_SIZE];
            char VOLUME[MAX_BUFFER_SIZE];
            char FONT[MAX_BUFFER_SIZE];
            char SWAP[MAX_BUFFER_SIZE];
        } HELP;
    } MUXTWEAKADV;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char HIDDEN[MAX_BUFFER_SIZE];
        char SOUND[MAX_BUFFER_SIZE];
        char TEMP[MAX_BUFFER_SIZE];
        char BRIGHT[MAX_BUFFER_SIZE];
        char HDMI[MAX_BUFFER_SIZE];
        char POWER[MAX_BUFFER_SIZE];
        char VISUAL[MAX_BUFFER_SIZE];
        char ADVANCED[MAX_BUFFER_SIZE];
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char GLOBAL[MAX_BUFFER_SIZE];
            char THEME[MAX_BUFFER_SIZE];
        } MUSIC;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char MENU[MAX_BUFFER_SIZE];
            char EXPLORE[MAX_BUFFER_SIZE];
            char COLLECTION[MAX_BUFFER_SIZE];
            char HISTORY[MAX_BUFFER_SIZE];
            char LAST[MAX_BUFFER_SIZE];
            char RESUME[MAX_BUFFER_SIZE];
        } STARTUP;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char HIDDEN[MAX_BUFFER_SIZE];
            char MUSIC[MAX_BUFFER_SIZE];
            char SOUND[MAX_BUFFER_SIZE];
            char STARTUP[MAX_BUFFER_SIZE];
            char TEMP[MAX_BUFFER_SIZE];
            char BRIGHT[MAX_BUFFER_SIZE];
            char HDMI[MAX_BUFFER_SIZE];
            char POWER[MAX_BUFFER_SIZE];
            char VISUAL[MAX_BUFFER_SIZE];
            char ADVANCED[MAX_BUFFER_SIZE];
        } HELP;
    } MUXTWEAKGEN;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char BATTERY[MAX_BUFFER_SIZE];
        char NETWORK[MAX_BUFFER_SIZE];
        char BLUETOOTH[MAX_BUFFER_SIZE];
        char CLOCK[MAX_BUFFER_SIZE];
        char DASH[MAX_BUFFER_SIZE];
        char FRIENDLY[MAX_BUFFER_SIZE];
        char REFORMAT[MAX_BUFFER_SIZE];
        char ROOT[MAX_BUFFER_SIZE];
        char SPLASH[MAX_BUFFER_SIZE];
        char FADE[MAX_BUFFER_SIZE];
        char COUNT[MAX_BUFFER_SIZE];
        char EMPTY[MAX_BUFFER_SIZE];
        char COUNT_FOLDER[MAX_BUFFER_SIZE];
        char COUNT_FILE[MAX_BUFFER_SIZE];
        char ANIMATION[MAX_BUFFER_SIZE];
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char BEHIND[MAX_BUFFER_SIZE];
            char FRONT[MAX_BUFFER_SIZE];
            char FS_BEHIND[MAX_BUFFER_SIZE];
            char FS_FRONT[MAX_BUFFER_SIZE];
            struct {
                char TITLE[MAX_BUFFER_SIZE];
                char B_LEFT[MAX_BUFFER_SIZE];
                char B_MID[MAX_BUFFER_SIZE];
                char B_RIGHT[MAX_BUFFER_SIZE];
                char M_LEFT[MAX_BUFFER_SIZE];
                char M_MID[MAX_BUFFER_SIZE];
                char M_RIGHT[MAX_BUFFER_SIZE];
                char T_LEFT[MAX_BUFFER_SIZE];
                char T_MID[MAX_BUFFER_SIZE];
                char T_RIGHT[MAX_BUFFER_SIZE];
            } ALIGN;
        } BOX_ART;
        struct {
            char TITLE[MAX_BUFFER_SIZE];
            char FULL[MAX_BUFFER_SIZE];
            char REM_SQ[MAX_BUFFER_SIZE];
            char REM_PA[MAX_BUFFER_SIZE];
            char REM_SQPA[MAX_BUFFER_SIZE];
        } NAME;
        struct {
            char BATTERY[MAX_BUFFER_SIZE];
            char NETWORK[MAX_BUFFER_SIZE];
            char BLUETOOTH[MAX_BUFFER_SIZE];
            char CLOCK[MAX_BUFFER_SIZE];
            char DASH[MAX_BUFFER_SIZE];
            char FRIENDLY[MAX_BUFFER_SIZE];
            char REFORMAT[MAX_BUFFER_SIZE];
            char ROOT[MAX_BUFFER_SIZE];
            char SPLASH[MAX_BUFFER_SIZE];
            char FADE[MAX_BUFFER_SIZE];
            char COUNT[MAX_BUFFER_SIZE];
            char EMPTY[MAX_BUFFER_SIZE];
            char COUNT_FOLDER[MAX_BUFFER_SIZE];
            char COUNT_FILE[MAX_BUFFER_SIZE];
            char ANIMATION[MAX_BUFFER_SIZE];
            char BOX_ART[MAX_BUFFER_SIZE];
            char BOX_ALIGN[MAX_BUFFER_SIZE];
            char NAME[MAX_BUFFER_SIZE];
        } HELP;
    } MUXVISUAL;

    struct {
        char TITLE[MAX_BUFFER_SIZE];
        char NTP[MAX_BUFFER_SIZE];
        char TERMINAL[MAX_BUFFER_SIZE];
        char SYNCTHING[MAX_BUFFER_SIZE];
        char SHELL[MAX_BUFFER_SIZE];
        char SFTP[MAX_BUFFER_SIZE];
        char RESILIO[MAX_BUFFER_SIZE];
        char TAILSCALE[MAX_BUFFER_SIZE];
        struct {
            char NTP[MAX_BUFFER_SIZE];
            char TERMINAL[MAX_BUFFER_SIZE];
            char SYNCTHING[MAX_BUFFER_SIZE];
            char SHELL[MAX_BUFFER_SIZE];
            char SFTP[MAX_BUFFER_SIZE];
            char RESILIO[MAX_BUFFER_SIZE];
            char TAILSCALE[MAX_BUFFER_SIZE];
        } HELP;
    } MUXWEBSERV;
};

void load_lang(struct mux_lang *lang);
